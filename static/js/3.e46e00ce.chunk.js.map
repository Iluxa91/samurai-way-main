{"version":3,"file":"static/js/3.e46e00ce.chunk.js","mappings":"kLACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,MAAQ,wB,mBCOpMA,EAAe,SAACC,GACzB,OAAO,gBAAKC,UAAWC,EAAAA,OAAhB,UACH,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCHvCC,EAAU,SAACN,GACpB,OAAO,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMO,W,oBC8ChCC,EAAmB,SAACR,GAC7B,IAAMS,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,eAAgB,IAEpBC,SAAU,SAAAC,GACN,IAAMC,EAA0B,GAGhC,OAFKD,EAAOF,eACHE,EAAOF,eAAeI,OAAO,MAAKD,EAAOH,eAAe,6BADrCG,EAAOH,eAAe,WAE3CG,GAEXE,SAAU,SAAAH,GACNd,EAAMkB,WAAWJ,EAAOF,mBAGhC,OACI,kBAAMK,SAAUR,EAAOU,aAAvB,WACI,4BACI,6BACIlB,UAAaQ,EAAOM,OAAOH,eAAgBV,EAAAA,MAAU,GACrDkB,YAAa,eACTX,EAAOY,cAAc,oBAE5BZ,EAAOa,QAAQV,gBAAkBH,EAAOM,OAAOH,iBAAkB,gBAAKW,MAAO,CAACC,MAAM,OAAnB,SAA4Bf,EAAOM,OAAOH,qBAEhH,mBAAQa,KAAK,SAAb,6B,8BClDZ,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdoB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACC,GACxB,MAAO,CACHZ,WAAY,SAACN,GACTkB,GAASC,EAAAA,EAAAA,GAAwBnB,SAOzCoB,EAAAA,EAFJ,EDjBuB,SAAChC,GACpB,IACIiC,EAAiBjC,EAAM6B,YAAYK,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAAC9B,EAAD,CAASC,QAAS6B,EAAE7B,aAC5E8B,EAAgBrC,EAAM6B,YAAYS,YAAYH,KAAI,SAAAjC,GAAC,OAAI,SAACH,EAAD,CAAcM,KAAMH,EAAEG,KAAMD,GAAIF,EAAEE,QAO7F,OACI,iBAAKH,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKmC,KAEL,iBAAKpC,UAAWC,EAAAA,SAAhB,WACI,yBAAM+B,KAaN,SAACzB,EAAD,CAAkBU,WAAYlB,EAAMkB,uB,mIEhChDqB,EAA6B,SAACX,GAAD,MAA8D,CAC3FY,OAAOZ,EAAMa,KAAKD,SAEf,SAASR,EAAqBU,GAQjC,OADiCf,EAAAA,EAAAA,IAAQY,EAARZ,EANjC,SAA2B3B,GACvB,IAAKwC,EAAuBxC,EAAvBwC,OAAUG,ECbR,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAGlD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GAEpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBpC,OAAQ+B,IACvCD,EAAMM,EAAiBL,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOI,UAAUC,qBAAqBC,KAAKZ,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,EDHD,CAA4BhD,EAA5B,GACA,OAAKwC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUxC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Yt20n\",\"dialogsItems\":\"Dialogs_dialogsItems__ClmGN\",\"active\":\"Dialogs_active__r0fW5\",\"messages\":\"Dialogs_messages__z3eu-\",\"message\":\"Dialogs_message__wW1H9\",\"error\":\"Dialogs_error__6wQGm\"};","import {NavLink} from 'react-router-dom'\r\nimport d from './../Dialogs.module.css'\r\n\r\ntype DialogsItemsPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport const DialogsItems = (props: DialogsItemsPropsType) => {\r\n    return <div className={d.dialog}>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n","import d from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div className={d.message}>{props.message}</div>\r\n}","import d from './Dialogs.module.css'\r\nimport {DialogsItems} from \"./DialogItem/DialogItem\";\r\nimport {Message} from './Message/Message';\r\nimport React from \"react\";\r\nimport {DialogsConatainerPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {useFormik} from \"formik\";\r\n\r\n// type FormDataType = {\r\n//     newMessageBody:string\r\n// }\r\n\r\nexport const Dialogs = (props: DialogsConatainerPropsType) => {\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n    let messageElement = props.dialogsPage.messageData.map(m => <Message message={m.message}/>)\r\n    let dialogElement = props.dialogsPage.dialogsData.map(d => <DialogsItems name={d.name} id={d.id}/>)\r\n\r\n// const addNewMessage = (formData: FormDataType) => {\r\n//     // console.log(formData.newMessageBody)\r\n//     props.addMessage(formData.newMessageBody)\r\n// }\r\n\r\n    return (\r\n        <div className={d.dialogs}>\r\n            <div className={d.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={d.messages}>\r\n                <div>{messageElement}</div>\r\n                {/*<div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <textarea ref={newMessageElement}*/}\r\n                {/*                  onChange={onMessageChange}*/}\r\n                {/*                  value={props.dialogsPage.messageForDialog}*/}\r\n                {/*        />*/}\r\n                {/*    </div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <button onClick={addMessage}>Add Message</button>*/}\r\n                {/*    </div>*/}\r\n                {/*</div>*/}\r\n                {/*<AddMessageFromRedux onSubmit={addNewMessage}/>*/}\r\n                <AddMessageFormik addMessage={props.addMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormikPropsType = {\r\n    addMessage: (value:string) => void\r\n}\r\ntype FormikErrorType = {\r\n    newMessageBody?: string\r\n}\r\n\r\nexport const AddMessageFormik = (props:AddMessageFormikPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessageBody: '',\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.newMessageBody){errors.newMessageBody='Required'}\r\n            else if (values.newMessageBody.length>100){errors.newMessageBody=\"Max length is 100 symbols\"}\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.addMessage(values.newMessageBody)\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea\r\n                    className = {formik.errors.newMessageBody? d.error : ''}\r\n                    placeholder={'New message'}\r\n                    {...formik.getFieldProps('newMessageBody')}\r\n                />\r\n                {formik.touched.newMessageBody && formik.errors.newMessageBody && <div style={{color:'red'}}>{formik.errors.newMessageBody}</div>}\r\n            </div>\r\n            <button type=\"submit\">Add message</button>\r\n        </form>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {addMessageActionCreator, initialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStoreType} from \"../../redux/store-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage:initialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageBody:string) => void\r\n}\r\nexport type DialogsConatainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state:AppReduxStoreType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch):MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody:string) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppReduxStoreType} from \"../redux/store-redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppReduxStoreType):MapStateToPropsForRedirectType => ({\r\n    isAuth:state.auth.isAuth})\r\n\r\nexport function withAuthRedirect <T>(Component:ComponentType<T>) {\r\n    function RedirectComponent(props:MapStateToPropsForRedirectType) {\r\n        let {isAuth,...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedRedirectComponent\r\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["DialogsItems","props","className","d","to","id","name","Message","message","AddMessageFormik","formik","useFormik","initialValues","newMessageBody","validate","values","errors","length","onSubmit","addMessage","handleSubmit","placeholder","getFieldProps","touched","style","color","type","compose","connect","state","dialogsPage","dispatch","addMessageActionCreator","withAuthRedirect","messageElement","messageData","map","m","dialogElement","dialogsData","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}